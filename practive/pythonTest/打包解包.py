def func(*arg):  # 打包
    print(arg)
    
func(1,2,3)

func(*(1,2,3))  # 只是对（1,2,3）进行解包，在func中还是打包了，要在func中解包，需要在函数中对参数进行解包操作

def func_解包(a, b,c):
    print(a,b,c)

func_解包(*(1,2,3))
arg = (1,2,3)
func_解包(*arg)
'''
主要看func中的参数格式，如果是func（*arg），没有解包，是打包；如果是func（a，b，c），
表示能够对传进来的打包的参数自动解包。func(a,b,c)这不就是最普通参数传递方式嘛，如果正常传递是可以，也可以传入一个包的形式，会自动解包
函数参数中有*，表示对输入的参数打包，*arg打包成元祖，**kwarg打包成字典
函数参数是正常的，输入中有*（） *arg，表示函数对*arg进行解包。
即：函数中参数有* 是函数在打包，函数中没有*，输入的参数中有*，是函数在解包。
字典需要注意，如果要解包，函数参数中必须是传入的字典的key，value会自动赋值给其中的key也就是函数参数。
总结：
*args 解包位置参数（变成独立的参数）
**kwargs 解包关键字参数（变成 name=value 形式）
解包就是把集合（元组/列表/字典）中的元素展开成独立的值
'''